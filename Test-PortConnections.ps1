# Mike Pursell 13.09.2016 

Function Test-PortConnections{

    <#
    .SYNOPSIS
    Test the connection to a remote server on a given port and attempts a file copy to a given 
    share on that box.

    .DESCRIPTION
    Attempts to open a socket on the remote server with the given ip and port.  If the FileCopy 
    switch is set, it will attempt a file copy to the given share.  Input is via csv using the 
    cvsPath parameter.  The csv file should be in the format ip,port,share.


    .PARAMETER CsvPath
    Path to the input csv file with the server/port/share information
    

    .PARAMETER FileCopy
    Switch to define whether or not a file copy attempt should take place.

    .PARAMETER Cleanup
    Switch to specify whether or not the test file should be deleted from the remote server
    share and the local machine.

    .PARAMETER TestFileName
    Name for the testFile that will be generated.

    .EXAMPLE
    Test-PortConnections -CsvPath .\connections.csv -testFile ConnectionTestFile.txt -FileCopy -Cleanup

    .INPUTS
    Takes input in the form of a csv file.  No pipeline input possible.

    .OUTPUTS
    No output other than console.
   

    #>

    [CmdletBinding()]

        param(
    
            [Parameter(Mandatory=$True)]
            [string]$CsvPath,

            
            [Parameter(Mandatory=$True)]
            [string]$TestFileName,

            [Parameter(Mandatory=$True)]
            [switch]$FileCopy,

            [Parameter(Mandatory=$false)]
            [switch]$Cleanup

        )




    # read in a csv file headed ip,port,share

    #$CsvPath = "./connections.csv"
    $serverList = import-csv $CsvPath

    # set some vars

    #$FileCopy = $true
    #$Cleanup = $true
    #$testFile = "ConnectionTestFile.txt"
    $testFileContent = "This is a file generated by a connection test.  It is safe to remove this file manually."
    [System.Collections.ArrayList]$errorList = @()

    foreach($server in $serverList){

        try{
        
            # try and open a socket on the remote server / port

            Write-Host "Trying to connect to" $server.ip -ForegroundColor Blue
            $socket = New-Object System.Net.Sockets.TcpClient($server.ip, $server.port)

            if($socket.Connected){

                Write-Host "Connected to" $server.ip "on" $server.port "  ...SUCCESS" -ForegroundColor Green
            
                try{

                # close the socket so we can attempt a file copy
                $socket.Close()

                }catch{

                    $errorMsg = $_.Exception.Message
                    $errorList.Add($errorMsg)
                    Write-Host "Error closing socket: $errorMsg" -ForegroundColor Red
                    continue
                }

                if($FileCopy){
        
                    # if the FileCopy switch is set, create a local file ($TestFile) and try to copy
                    # the file to the remote server share

                    Write-Host "Creating local test file" -ForegroundColor Blue

                    # build the remote path

                    $hostPath = Join-Path -Path \\ -ChildPath $server.ip
                    $sharePath = Join-Path -Path \ -ChildPath $server.share

                    $fullPath = Join-Path -Path $hostPath -ChildPath $sharePath

                    # create the local test file and stick some text in there

                    New-Item -Path ./ -ItemType File -Name $TestFileName -Force | Out-Null
                    Add-Content -Path ./$TestFileName -Value $testFileContent

                    # copy the test file to the remote share

                    Write-Host "Copying file to $fullPath" -ForegroundColor Blue
                
                    try{

                            Copy-Item -Path ./$TestFileName -Destination $fullPath
                            Write-Host "Copy to $fullPath          ...SUCCESS" -ForegroundColor Green

                        }catch{

                            $errorMsg = $_.Exception.Message
                            $errorList.Add($errorMsg)
                            Write-Host "Error copying file: $errorMsg" -ForegroundColor Red
                            continue

                        }
                    if($Cleanup){

                        # delete test file from remote share and local machine

                        Write-Host "Cleaning up..." -ForegroundColor Blue
                
                        try{
                                Remove-Item -Path "./$TestFilename"
                                Remove-Item -Path "$fullPath\$TestFileName"
                                Write-Host "Cleanup                            ...SUCCESS" -ForegroundColor Green

                            }catch{
                        
                                $errorMsg = $_.Exception.Message
                                $errorList.Add($errorMsg)
                                Write-Host "Error removing file.  Check that the test file has been removed from \\"$server.ip"\"$server.share ": $errorMsg" -ForegroundColor Red
                                continue
                            }

                    }


                }

            }else{

                Write-Host "Failed to connect to $server.ip on $server.port" -ForegroundColor Red
            }
        }catch{

            $errorMsg = $_.Exception.Message
            $errorList.Add($errorMsg)
            Write-Host "Exception: $errorMsg" -ForegroundColor Red

        }
    
    } 

    if(!$errorList){

        Write-Host ""
        Write-Host "*********** FINISHED *************" -ForegroundColor Green

    }else{

       Write-Host ""
       Write-Host "********FINISHED WITH ERRORS********" -ForegroundColor Red -BackgroundColor Yellow
    }
}

Test-PortConnections -CsvPath .\connections.csv -TestFileName ConnectionTestFile.txt -FileCopy -Cleanup 



   